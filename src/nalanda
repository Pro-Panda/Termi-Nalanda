#! /usr/bin/python

from bs4 import BeautifulSoup
import os
import requests

join = os.path.join

INSTALL_PATH = join(os.path.expanduser("~"), ".nalanda")
SLIDES_PATH = join(os.path.expanduser("~"), "BITS")
SUB_NAMES = open(join(INSTALL_PATH, "sub-name.txt")).read().split("\n")
SUB_URLS = open(join(INSTALL_PATH, "sub-url.txt")).read().split("\n")
ZIP_FILE_LINK = "http://nalanda.bits-pilani.ac.in/mod/folder/download_folder.php"
NALANDA_LOGIN = "http://nalanda.bits-pilani.ac.in/login/index.php"


def login():
    session = requests.session()
    username, password = open(join(INSTALL_PATH, "config.txt")).read().split("\n")
    session.post(NALANDA_LOGIN, data={
        "username": username,
        "password": password,
    })
    return session


def sorting_links():
    sub_links = [BeautifulSoup(session.get(sub).text, "html.parser")
        .find_all("a", {"onclick": ""}) for sub in SUB_URLS]
    res_urls, news_urls, notice_urls = (
        [[] for x in range(len(sub_links))] for y in range(3))

    for x in range(len(sub_links)):
        for y in range(len(sub_links[x])):
            url = (sub_links[x][y]).get("href")
            if("resource/view.php?id" in url or "folder/view.php?id=" in url):
                res_urls[x].append(url)
            elif("page/view.php?id" in url):
                notice_urls[x].append(
                    [url, sub_links[x][y].contents[1].contents[0]])
            elif("forum/view.php?id" in url):
                news_urls[x].append(url)
    return (notice_urls, news_urls, res_urls)


def bold(text):
    return "\033[1m" + text + "\033[0m"


def get_news(session, news_urls):
    subject_news_url = [[] for x in range(len(SUB_NAMES))]
    for x in range(len(SUB_NAMES)):
        for y in range(len(news_urls[x])):
            result = session.get(news_urls[x][y])
            soup = BeautifulSoup(result.text, "html.parser")
            discussion_list = soup.find_all("tr", "discussion")
            for url in discussion_list:
                if url.find("td", "topic starter pinned"):
                    subject_news_url[x].append([url.contents[0].contents[1].get(
                        "href"), url.contents[0].contents[1].contents[0]])
                else:
                    subject_news_url[x].append([url.contents[0].contents[0].get(
                        "href"), url.contents[0].contents[0].contents[0]])
    return subject_news_url


def find_new(session, urls_title, news_urls):
    new_urls_title = [[]for x in range(len(SUB_NAMES))]
    for x in range(len(SUB_NAMES)):
        subject_file = open(os.path.join(INSTALL_PATH, SUB_NAMES[x]), "a+")
        subject_read = (subject_file.seek(0).read()).split("\n")
        for y in (urls_title[x] + news_urls[x]):
            if y[1] not in subject_read:
                new_urls_title[x].append(y)
                subject_file.write("\n" + y[1])
    return new_urls_title


def term_display(update_news, new_lectures):
    print(bold("News:"))
    if(num_news == sum([len(x) for x in update_news])):
        print("\tNo updates")
    else:
        for x in range(len(SUB_NAMES)):
            if update_news[x] != []:
                print(bold("\n" + SUB_NAMES[x] + "-"))
            [print("\t" + bold(str(y + 1)) + ". " + update_news[x][y][1] + "\n\t\t" +
                   update_news[x][y][0]) for y in range(len(update_news[x]))]

    print ("-" * 60 + "\n")

    print(bold("Lectures:"))
    if(num_notices == sum([len(x) for x in new_lectures])):
        print("\tNo updates")
    else:
        [print (bold(SUB_NAMES[x]) + " has new updates")
        for x in range(len(SUB_NAMES)) if len(update_list[x]) != 0]
        print ("file://" + SLIDES_PATH)


def download(session, res_urls):
    for sub in SUB_NAMES:
        sub_path = join(SLIDES_PATH, sub)
        if not os.path.exists(sub_path):
            os.makedirs(sub_path)

    sub_updates = [[] for x in SUB_NAMES]
    for x in range(len(SUB_NAMES)):
        done_slides_file = open(join(
            INSTALL_PATH, "Lectures", SUB_NAMES[x]), "a+")
        done_slides = done_slides_file.seek(0).read().split("\n")
        new_slides = res_urls[x] - done_slides
        for y in new_slides:
            if "folder/view" in y:
                id_param = y.split("php")[1]
                result = session.get(ZIP_FILE_LINK + id_param)
            else:
                result = session.get(y)
            file_name = result.headers["content-disposition"].split('e="')[1].split('"')[0]
            with open(join(SLIDES_PATH, SUB_NAMES[x], file_name), "wb") as f:
                f.write(result.content)
            done_slides_file.write(y + "\n")
    
    return sub_updates


def main():
    """Displaying notices, news and other announcements, updating slides"""
    try:
        print ("\t\t" + bold("**nalanda-cli**"))
        session = login()
        notice_urls, news_urls, res_urls = sorting_links()
        subject_news_url = get_news(session, news_urls)
        unread_news = find_new(session, notice_urls, subject_news_url)
        new_lectures = download(session, res_urls)
        term_display(unread_news, new_lectures)

    except requests.exceptions.ConnectionError:
        quit("No Internet Connection. Please retry")
    except IOError:
        quit("Unable to read from file. Please reinstall termi-Nalanda")
    except KeyboardInterrupt:
        print("Stopped by user.")


if(__name__ == "__main__"):
    main()
